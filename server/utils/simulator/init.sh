#!/bin/bash

SIM_PATH="${PWD}/server/utils/simulator/"
V_PATH="${PWD}/server/data/"
OUTPUT_DIR="obj_dir"
V_FILENAME="outFile"                            # Keep the name the same to make it simple
FLAGS="-L/usr/local/lib -lsioclient -pthread"   # This are needed to compile sockeIO++
MAIN_CPP="${SIM_PATH}mainSimulator.cpp"
SIMULATION_CPP="${SIM_PATH}simulation.cpp"
CONNECTION_CPP="${SIM_PATH}connection.cpp"
SIGNALS_CPP="${SIM_PATH}getSignals.cpp"

# function on_sigint()
# {
#     echo "Finish process"
#     pkill -P $$
#     exit
# }
# trap on_sigint SIGTERM


# 1. Generate the verilator files (also convert Verilog to c++)
echo "Executing verilator..."
verilator -LDFLAGS "$FLAGS" \
            --trace \
            -cc \
            +1364-1995ext+v \
            -I$V_PATH $V_PATH$V_FILENAME \
            -Mdir $SIM_PATH$OUTPUT_DIR \
            --exe $MAIN_CPP $SIMULATION_CPP $CONNECTION_CPP $SIGNALS_CPP
    
if [ $? -ne 0 ]; then
    echo "Verilator error"
    exit 1
fi

echo "[OK] Verilator done"

# 2. Make the proyect (the make file is generated by verilator)
echo "Executing make"
make -C "${SIM_PATH}obj_dir" -f "V$V_FILENAME.mk" V$V_FILENAME
if [ $? -ne 0 ]; then
    echo "Make error"
    exit 1
fi
echo "[OK] Make done"

# 3. Run the program
echo "Executing simulator"
$SIM_PATH$OUTPUT_DIR/V$V_FILENAME